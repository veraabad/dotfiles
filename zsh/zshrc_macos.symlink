# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"
export PATH="/usr/local/opt/ruby/bin:$PATH"
export PATH=$PATH:$(ruby -e 'puts Gem.bindir')
export PATH="$HOME/Library/Python/2.7/bin:$PATH"
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
# TODO: export HOMEBREW_GITHUB_API_TOKEN=

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="spaceship"

# SPACESHIP_PROMPT_ADD_NEWLINE="true"
# SPACESHIP_CHAR_SYMBOL=" \uf054"
SPACESHIP_CHAR_PREFIX="\uf296"
# SPACESHIP_CHAR_SUFFIX=(" ")
# SPACESHIP_CHAR_COLOR_SUCCESS="green"
# SPACESHIP_PROMPT_DEFAULT_PREFIX="$USER"
# SPACESHIP_PROMPT_FIRST_PREFIX_SHOW="true"
# SPACESHIP_USER_SHOW="true"

# Update oh-my-zsh without asking
DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/

plugins=(
    git
    zsh-syntax-highlighting
    zsh-autosuggestions
    notify
    tumult
    sublime
    colored-man-pages
    hacker-quotes
)

source $ZSH/oh-my-zsh.sh
alias ls='eza --icons --group-directories-first'
alias lc='eza --tree'
alias dl='diskutil list'
alias dk_ej_2='diskutil eject /dev/disk2'
alias mac-update='sudo softwareUpdate -l -i -a -R'

zstyle ':notify:*' error-title "Command failed (in #{time_elapsed} secondds)"
zstyle ':notify:*' success-title "Command finished (in #{time_elapsed} seconds)"
zstyle ':notify:*' command-complete-timeout 15

# Neovim configuration
alias nvb="NVIM_APPNAME=nvb nvim"
alias NvimTest="NVIM_APPNAME=NvimTest nvim"

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='nvb'
else
    export EDITOR='nvb'
fi

# You may need to manually set your language environment
export LANG=en_US.UTF-8

eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# Load rust
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

# Load any local customization
[ -f ~/.zshrc.local ] && . ~/.zshrc.local

eval "$(starship init zsh)"

caffeinate-on-process() {
    # set -x
    DISPLAY_ON=""
    while getopts "dw:" arg
    do
        case ${arg} in
            d) DISPLAY_ON="-d" ;;
            w) PROCESS_NAME=${OPTARG} ;;
        esac
    done

    GREP_RESULTS=$(ps -A | grep ${PROCESS_NAME} | grep -v "grep")
    RESULT_COUNT=$(echo $GREP_RESULTS | grep -c '^')
    GRAB_PID='head -1 | xargs | cut -d " " -f 1'
    if [[ ${RESULT_COUNT} -gt 2 ]]
    then
        RELEVANT_RESULTS=$(echo ${GREP_RESULTS} | head -$(($RESULT_COUNT-1)))
        RESULT_COUNTER=1
        RESULT_ARRAY=()
        echo ${RELEVANT_RESULTS} | while read RESULT
        do
            echo "${RESULT_COUNTER} -- ${RESULT}"
            RESULT_ARRAY+=($RESULT)
            RESULT_COUNTER=$(($RESULT_COUNTER+1))
        done
        echo "Enter the index of the process you would like to caffeinate on"
        read CHOICE
        PROCESSS_PID=$(echo ${RESULT_ARRAY[$CHOICE]} | eval ${GRAB_PID})
    else
        PROCESSS_PID=$(echo $GREP_RESULTS | eval ${GRAB_PID})
    fi
    echo "caffeinate -w ${PROCESSS_PID} ${DISPLAY_ON}"
    caffeinate -w ${PROCESSS_PID} ${DISPLAY_ON} &
}

nvims() {
  items=("default" "nvb" "AstroNvim", "NvimTest")
  config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config  " --height=~50% --layout=reverse --border --exit-0)
  if [[ -z $config ]]; then
    echo "Nothing selected"
    return 0
  elif [[ $config == "default" ]]; then
    config=""
  fi
  NVIM_APPNAME=$config nvim $@
}

update-omz-custom-plugins() {
    for d in $(find ${ZSH}/custom/plugins/ -maxdepth 1 -mindepth 1 -type d)
    do
        cd $d
        gfa && ggl
        cd -
    done
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
